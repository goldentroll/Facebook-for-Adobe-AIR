<!--
  Copyright Facebook Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 -->
<!-- There's one of these at the top-level.
     Major container for letting the user share stuff! -->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
         xmlns:util="fbair.util.display.*"
         xmlns:composer="fbair.composer.*"
         verticalGap="5"
         nativeDragEnter="dragEnter(event)"
         nativeDragDrop="dragDrop(event)" >
  <mx:Metadata>
    [Event(name="statusUpdated", type="fb.FBEvent")]
  </mx:Metadata>

  <mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:util="fbair.util.display.*"
           width="100%"
           horizontalGap="6">

    <!-- Text area for entering your status update -->
    <util:GrowableTextArea id="composerInput"
                           styleName="composerInput"
                           width="100%"
                           focusOutText="{FOCUS_OUT_STATUS}"
                           focusInHeight="{
                             StylePrefs.sizeStyle == StylePrefs.SIZE_LARGE ?
                               48 : 40}"
                           focusOutHeight="{
                             StylePrefs.sizeStyle == StylePrefs.SIZE_LARGE ?
                               29 : 25}" />

    <util:FBButton id="shareButton"
                   autoStyle="true"
                   click="shareStatus(event)" >
      <mx:Label styleName="fbButtonLabel"
                text="Share" />
    </util:FBButton>
  </mx:HBox>

  <mx:HBox id="albumName"
           horizontalGap="4"
           width="100%"
           visible="false"
           includeInLayout="false">
    <mx:Label text="Album name:"
              styleName="albumFieldLabel" />
    <mx:TextInput id="albumNameInput"
                  width="100%"
                  styleName="albumFieldText" />
  </mx:HBox>

  <composer:DroppedPhotosList id="droppedPhotoList"
                              width="100%"
                              dataProvider="{droppedPhotos}"
                              visible="false"
                              styleName="droppedPhotoList"
                              creationComplete="photoCreationComplete(event)" />

  <mx:Script><![CDATA[
    import fb.FBAPI;
    import fb.FBConnect;
    import fb.FBEvent;
    import fb.util.Output;
    import fb.util.StringUtil;

    import fbair.gui.StylePrefs;
    import fbair.nile.NileContainer;
    import fbair.notification.Toast;
    import fbair.notification.ToastManager;

    import flash.desktop.ClipboardFormats;
    import flash.desktop.NativeDragManager;
    import flash.events.MouseEvent;
    import flash.events.NativeDragEvent;
    import flash.net.URLRequest;
    import flash.net.navigateToURL;

    import mx.collections.ArrayCollection;
    import mx.core.Application;
    import mx.events.FlexEvent;
    import mx.utils.ObjectProxy;

    private static const ValidPhotoTypes:Array = [
      "jpg",
      "jpeg",
      "gif",
      "png",
      "bmp"
    ];

    private var submittedMessage:String;

    [Bindable]
    private var droppedPhotos:ArrayCollection = new ArrayCollection();

    // When uploading photos, this counts how many more to get back success
    //   before we know we've uploaded them all...
    private var remainingUploads:int = 0;

    private static const FOCUS_OUT_STATUS:String = "What's on your mind?";
    private static const FOCUS_OUT_CAPTION:String = "Describe your photo";
    private static const FOCUS_OUT_ALBUM:String = "Describe your album";

    private static const APP_DEFAULT_ALBUM_NAME:String =
      "Facebook for Adobe AIR Photos";

    private static const URL_EDIT_ALBUM:String =
      "http://www.facebook.com/editphoto.php?aid=";

    // Called when the composer is initialized
    private function photoCreationComplete(event:FlexEvent):void {
      droppedPhotoList.addEventListener(FBEvent.DELETED, deletePhoto);
    }

    // Called when the Share button has been clicked
    private function shareStatus(event:MouseEvent):void {
      if (event.shiftKey) {
        Output.logDump();
        return;
      }

      if (!composerInput.active) {
        if (droppedPhotos.length == 0)
          composerInput.text = '';
        else {
          Application.application.focusManager.setFocus(composerInput);
          return;
        }
      }

      // Don't share a blank string! But only if it's a status update.
      if (composerInput.text.length == 0 && droppedPhotos.length == 0) return;

      // Disenable (more popularly known as disable)
      submittedMessage = composerInput.text;
      composerInput.active = false;
      composerInput.editable = false;
      shareButton.enabled = false;
      FBConnect.dispatcher.dispatchEvent(new FBEvent(FBEvent.DISABLE));

      // Our basic set of stream_publish options...
      var publish_options:Object = {message:submittedMessage};

      // If this is a page, then we need to do some special stuff...
      if (NileContainer.FilterIsPage) {
        // Check to make sure we can admin this page
        if (!FBConnect.canAdminPage(Number(NileContainer.CurrentFilter))) {
          // If not we need to pop-out the extended-perm dialog
          FBConnect.dispatcher.addEventListener(FBEvent.PAGE_PERMISSION_CHANGED,
            pagePermissionChange);
          FBConnect.requestPageAdministration(NileContainer.CurrentFilter);
        }
        else {
          publish_options.uid = NileContainer.CurrentFilter;
          FBAPI.callMethod("stream.publish", publish_options)
            .addEventListener(FBEvent.SUCCESS, statusUpdated);
        }
      }
      else {
        // We only support pic uploading for users, not pages
        if (droppedPhotos.length > 0) {
          FBConnect.dispatcher.dispatchEvent(
            new FBEvent(FBEvent.ALERT, "Uploading Photos"));

          if (droppedPhotos.length > 1) {
            // If we are uploading multiple photos, create album first
            if (albumNameInput.length == 0) {
              // Enforce album name
              Application.application.focusManager.setFocus(albumNameInput);
              return;
            }
            FBAPI.callMethod("photos.createAlbum", {
              name: albumNameInput.text,
              description: submittedMessage
            }).addEventListener(FBEvent.SUCCESS, uploadDroppedPhotos);
          } else {
            FBAPI.uploadPhoto(droppedPhotos[0].file, {caption:submittedMessage})
              .addEventListener(FBEvent.SUCCESS, photoUploadSuccess);
            droppedPhotos.removeItemAt(0);
          }
        } else {
          FBAPI.callMethod("stream.publish", publish_options)
            .addEventListener(FBEvent.SUCCESS, statusUpdated);
        }
      }
    }

    // Called when there are multiple photos to be uploaded and in response to
    // a successful album creation.
    private function uploadDroppedPhotos(event:FBEvent):void {
      if (!event.data.hasOwnProperty('aid')) {
        Output.bug("We didn't get back the album ID");
        return;
      }

      remainingUploads = droppedPhotos.length;
      for (var i:int = 0; i < droppedPhotos.length; i++)
        FBAPI.uploadPhoto(droppedPhotos.getItemAt(i).file, {aid:event.data.aid})
          .addEventListener(FBEvent.SUCCESS, multiPhotoUploadSuccess);
      droppedPhotos.removeAll();
    }

    // Called when the user is done hopefully validating our pages
    //   extended permission.
    private function pagePermissionChange(event:FBEvent):void {
      if (FBConnect.canAdminPage(Number(NileContainer.CurrentFilter))) {
        FBAPI.callMethod("stream.publish", {
          message:submittedMessage,
          uid:NileContainer.CurrentFilter
        }).addEventListener(FBEvent.SUCCESS, statusUpdated);
      }
      else resetFields();
    }

    // Called when the server has verified status.set
    private function statusUpdated(event:FBEvent):void {
      if (!submittedMessage) return;

      // Dispatch event that we've updated our status
      dispatchEvent(new FBEvent("statusUpdated", {
        post_id:event.data,
        actor_id:NileContainer.FilterIsPage ?
          NileContainer.CurrentFilter : FBConnect.session.uid,
        app_id:ApplicationBase.AppID,
        message:submittedMessage,
        likes:{count:0, user_likes:false, can_like:true},
        comments:{count:0, posts:[], can_post:true, can_remove:true},
        created_time:(new Date().time / 1000),
        is_page:NileContainer.FilterIsPage,
        filter_key:NileContainer.CurrentFilter,
        attachment:{}
      }));

      resetFields();
    }

    /**
     * Called when a photo in a single-photo upload operation succeeeds
     */
    private function photoUploadSuccess(event:FBEvent):void {
      resetFields();

      if (!event.data.hasOwnProperty("link")) {
        Output.bug("link to photo not returned by server");
        return;
      }

      // Feed a fake photo upload finished notification into the toaster
      ToastManager.justin.feedNewToast({
        title_text:'Your photo is now uploaded',
        body_text:'Click here to see the new photo',
        sender_id:FBConnect.session.uid,
        href:event.data.link,
        notification_id:0
      });

      FBConnect.dispatcher.dispatchEvent(new FBEvent(FBEvent.RESOLVED));
    }

    /**
     * Called when a photo in a multi-photo upload operation succeeds
     */
    private function multiPhotoUploadSuccess(event:FBEvent):void {
      // Don't do anything until all photos have been uploaded
      remainingUploads--;
      if (remainingUploads > 0) return;

      resetFields();

      // Direct users to album edit screen
      if (!event.data.hasOwnProperty("aid"))
        Output.bug("Album ID was not returned by server");
      else
        navigateToURL(new URLRequest(URL_EDIT_ALBUM +
          StringUtil.lowOrder64(event.data.aid)));

      FBConnect.dispatcher.dispatchEvent(new FBEvent(FBEvent.RESOLVED));
    }

    // Called when the user drags something over the box
    private function dragEnter(event:NativeDragEvent):void {
      // Make sure files are being dragged over
      // We only support photo uploading on users
      if (event.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT) &&
          !NileContainer.FilterIsPage)
        NativeDragManager.acceptDragDrop(this);
    }

    // Called when the user drops something onto the box
    private function dragDrop(event:NativeDragEvent):void {
      var files:Array = event.clipboard.getData(
        ClipboardFormats.FILE_LIST_FORMAT) as Array;

      // Inline functions are hot.
      var hasPhoto:Function = function(url:String):Boolean {
        for (var i:int = 0; i < droppedPhotos.length; i++)
          if (droppedPhotos.getItemAt(i).source == url) return true;
        return false;
      }

      var previousNumberOfPhotos:int = droppedPhotos.length;
      
      for each (var photo:File in files) {
        // Don't add dupes or invalid file types
        if (hasPhoto(photo.url)) continue;
        if (ValidPhotoTypes.indexOf(photo.extension) == -1) continue;

        photo.load();
        droppedPhotos.addItem(new ObjectProxy({
          file: photo,
          source: photo.url
        }));
      }

      // If we didn't add any photos, then fuck it.
      if (droppedPhotos.length == previousNumberOfPhotos) return;

      droppedPhotoList.visible = true;
      composerInput.focusOutText = FOCUS_OUT_CAPTION;
      if (droppedPhotos.length > 1) {
        composerInput.focusOutText = FOCUS_OUT_ALBUM;
        albumName.visible = true;
        albumName.includeInLayout = true;
      }
    }

    // Called when the delete button is pressed on a photo
    private function deletePhoto(event:FBEvent):void {
      droppedPhotos.removeItemAt(droppedPhotos.getItemIndex(event.target.data));

      if (droppedPhotos.length == 1) {
        resetAlbumField();
        composerInput.focusOutText = FOCUS_OUT_CAPTION;
      }

      if (droppedPhotos.length == 0) resetPhotosPanel();
    }

    /**
     * Reset composer fields
     */
    private function resetFields():void {
      resetPhotosPanel();
      submittedMessage = null;
      composerInput.editable = true;
      shareButton.enabled = true;
      FBConnect.dispatcher.dispatchEvent(new FBEvent(FBEvent.ENABLE));
    }

    /**
     * Hide album field
     */
    private function resetAlbumField():void {
      albumName.visible = false;
      albumName.includeInLayout = false;
      albumNameInput.text = '';
    }

    /**
     * Hide all photo stuff.
     */
    private function resetPhotosPanel():void {
      resetAlbumField();
      droppedPhotoList.visible = false;
      composerInput.focusOutText = FOCUS_OUT_STATUS;
    }
  ]]></mx:Script>
</mx:VBox>
