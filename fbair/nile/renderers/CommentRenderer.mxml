<!--
  Copyright Facebook Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 -->
<!-- Represents one Comment within the CommentsRenderer -->
<util:AnimatedCanvas xmlns:mx="http://www.adobe.com/2006/mxml"
                     xmlns:gui="fbair.gui.*"
                     xmlns:util="fbair.util.display.*"
                     implements="fbair.gc.Recyclable"
                     width="100%"
                     animateOut="true"
                     animateOnce="true"
                     creationComplete="creationComplete(event)" >
  <mx:HBox width="100%"
           styleName="commentRenderer">

    <!-- The profile image of the user that made this comment -->
    <gui:RoundedProfileImage id="profilePic"
                             profileID="{data.fromid}"
                             size="{PicSize}"
                             cornerRadius="5" />

    <!-- The users name followed by their comment -->
    <mx:VBox styleName="commentVBox"
             width="100%" >
      <mx:HBox styleName="commentHeader">
        <mx:Text htmlText="{StringUtil.linkify(data.name, data.url)}" />
        <mx:Text text="{TimeUtil.describeWhenShort(data.time)}"
                 styleName="commentTimeStamp" />
      </mx:HBox>

      <mx:Text styleName="commentText"
               htmlText="{StringUtil.htmlize(data.text)}"
               width="100%" />
    </mx:VBox>

    <mx:Button id="commentDeleteButton"
               styleName="commentDeleteButton"
               buttonMode="true"
               includeInLayout="{data.fromid == FBConnect.session.uid
                                 || data.can_remove}"
               visible="{commentDeleteButton.includeInLayout}"
               click="deleteComment(event)" />
  </mx:HBox>
  <mx:Script><![CDATA[
    import fb.FBAPI;
    import fb.FBConnect;
    import fb.FBEvent;
    import fb.util.Output;

    import fbair.util.ProfileCache;
    import fb.util.StringUtil;
    import fbair.util.TimeUtil;

    import flash.events.MouseEvent;

    import mx.utils.ObjectProxy;

    public static const COMMENT_REMOVED:String = "commentRemoved";
    public static const PicSize:int = 28;

    // Constructor
    private function creationComplete(evt:Event):void {
      // debug trace
      profilePic.addEventListener(MouseEvent.CLICK, clickedProfilePic, true);
    }

    // "data" in this context is actually an item in stream.comments.posts
    override public function set data(new_data:Object):void {
      Output.assert(new_data != null,
        "Setting null data on CommentRenderer?: " + this);

      // Proxy our vars, for binding
      super.data = new ObjectProxy(new_data);

      // Fetch the profile data for this user.
      ProfileCache.getProfile(data.fromid).addEventListener(
        ProfileCache.PROFILE_FETCHED,
        function(event:FBEvent):void {
          data.name = event.data.name;
          data.url = event.data.url;
        });
    }

    // Called when user has clicked delete button
    private function deleteComment(event:MouseEvent):void {
      // We don't want the user clicking it twice
      commentDeleteButton.enabled = false;

      // Call the server and delete our comment
      FBAPI.callMethod("stream.removeComment", {comment_id:data.id})
        .addEventListener(FBEvent.SUCCESS, function(event:FBEvent):void {
          // Dispatch that we're deleted, biotch
          dispatchEvent(new Event(COMMENT_REMOVED, true));
        });
    }

    // Profile pick was clicked, for debugging
    private function clickedProfilePic(event:MouseEvent):void {
      if (!event.shiftKey) return;
      Output.alert(data);
      event.stopImmediatePropagation();
    }

    // Recycle, kids!
    public function recycle():void {
      // Re-enable our delete button for recycling
      commentDeleteButton.enabled = true;

      // We create our own object proxy here, so we need to null it
      super.data = null;
    }
  ]]></mx:Script>
</util:AnimatedCanvas>
