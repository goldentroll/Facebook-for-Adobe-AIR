<!--
  Copyright Facebook Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 -->
<!-- This is a content renderer.
     Every NileRenderer that contains more than a status update
     has exactly one attachment renderer. -->
<mx:Box xmlns:mx="http://www.adobe.com/2006/mxml"
        xmlns:renderer="fbair.nile.renderers.*"
        xmlns:util="fbair.util.display.*"
        implements="fbair.gc.Recyclable"
        direction="{numMediaItems > 1 ? 'vertical' : 'horizontal'}"
        creationComplete="creationComplete(event)" >

  <!-- HBox of all our items -->
  <mx:HBox id="mediaItems"
           percentWidth="{numMediaItems == 1 ? 0 : 100}"
           height="100%"
           styleName="mediaItems"
           removed="itemRemoved(event)"
           includeInLayout="{numMediaItems > 0}" />

  <mx:VBox width="100%"
           styleName="{numMediaItems == 0 ?
             'noItemDetail' : 'multiItemDetail'}" >

    <util:LinkText id="itemLink"
                   styleName="itemLink"
                   width="100%"
                   text="{data.name}"
                   url="{data.href}"
                   includeInLayout="{!StringUtil.empty(data.name)}"
                   visible="{itemLink.includeInLayout}" />

    <mx:Text id="itemSource"
             styleName="itemSource"
             htmlText="{data.caption}"
             width="100%"
             includeInLayout="{!StringUtil.empty(data.caption)}"
             visible="{itemSource.includeInLayout}" />

    <mx:Text id="itemDescription"
             styleName="itemDescription"
             htmlText="{data.description}"
             width="100%"
             condenseWhite="true"
             truncateToFit="true"
             maxHeight="{numMediaItems == 1 ? 63 : 47}"
             includeInLayout="{!StringUtil.empty(itemDescription.htmlText)}"
             visible="{itemDescription.includeInLayout}" />

    <!-- Renders the properties of a story, such as event time/place -->
    <mx:Repeater id="itemProperties"
                 dataProvider="{itemPropertyList}"
                 recycleChildren="true" >
      <mx:HBox styleName="itemProperty"
               width="100%" >
        <mx:Label styleName="itemPropertyName"
                  text="{itemProperties.currentItem.name + ':'}" />
        <mx:Text  styleName="itemPropertyText"
                  width="100%"
                  text="{itemProperties.currentItem.text}" />
      </mx:HBox>
    </mx:Repeater>
  </mx:VBox>

  <mx:Script><![CDATA[
    import fb.util.Output;
    import fb.util.StringUtil;

    import fbair.gc.Depot;
    import fbair.nile.renderers.MediaItem;
    import fbair.util.HashArray;

    import mx.collections.ArrayCollection;
    import mx.events.FlexEvent;
    import mx.utils.ObjectProxy;

    public static const MaxImageWidth:int = 117;
    public static const MaxImageHeight:int = 160;
    public static const MaxImageHeightMulti:int = 120;

    // Our list of media items
    public var itemsHash:HashArray = new HashArray();
    [Bindable] public var numMediaItems:int = 0;

    [Bindable] public var itemPropertyList:ArrayCollection;

    // When we were created
    private function creationComplete(event:FlexEvent):void {
      // Add any items to display tree that were already set in data
      for each (var item:MediaItem in itemsHash)
        mediaItems.addChild(item);

      // Update our dimensions
      updateImageDimensions();
    }

    // When we remove old items from the attachment renderer
    //   we want to recycle them
    private function itemRemoved(event:Event):void {
      if (event.target is MediaItem)
        Depot.put(event.target);
    }

    // When we got new data
    override public function set data(new_data:Object):void {
      // We only set once per recycle, so don't care about news...
      if (data) return;
      super.data = new_data;

      // Add any not already existent
      for each (var item:Object in data.media) {
        // Create the item
        var mediaItem:MediaItem = Depot.get(MediaItem);
        mediaItem.data = item;

        // Add to our list
        itemsHash.push(mediaItem.data.src, mediaItem);

        // Add to display tree
        if (mediaItems) mediaItems.addChild(mediaItem);
      }

      // update the number of media items we have
      numMediaItems = data.media.length;

      // Update our dimensions, if we have a display tree..
      if (mediaItems) updateImageDimensions();

      // Create properties
      if (data.properties is Array) {
        for (var i:int = 0; i < data.properties.length; i++)
          data.properties[i] = new ObjectProxy(data.properties[i]);
        itemPropertyList = new ArrayCollection(data.properties);
      }
    }

    // Fight global warming!
    public function recycle():void {
      Output.assert(mediaItems != null,
        "Recycling an attachment renderer that never created?" + this);

      // Remove all media items
      while (itemsHash.length > 0) {
        var deadItem:MediaItem = itemsHash.removeIndex(0)[0];
        if (mediaItems && mediaItems.contains(deadItem))
          mediaItems.removeChild(deadItem);
      }

      // Reset media items to 0
      numMediaItems = 0;

      // Clear itemsHash too
      itemsHash = new HashArray();

      // Reset properties renderer
      itemPropertyList = null;

      // Data to null!
      super.data = null;
    }

    // Update all our image dimensions
    private function updateImageDimensions():void {
      for each (var item:MediaItem in itemsHash) {
        item.maxImageHeight = numMediaItems > 1 ?
          MaxImageHeightMulti : MaxImageHeight;
        item.maxImageWidth = numMediaItems > 1 ?
          (width - mediaItems.getStyle('horizontalGap') *
            (numMediaItems - 1)) /
          numMediaItems : MaxImageWidth;
      }
    }
  ]]></mx:Script>
</mx:Box>
