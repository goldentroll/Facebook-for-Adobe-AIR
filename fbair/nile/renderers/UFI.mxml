<!--
  Copyright Facebook Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 -->
<!-- The UFI stands for Unified Feedback Interface, and is the UI we
     use on facebook for getting and displaying likes and comments about
     stories, photos, and other content -->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
         xmlns:renderer="fbair.nile.renderers.*"
         xmlns:util="fbair.util.display.*"
         creationComplete="creationComplete(event)" >

  <!-- We use these fades when replacing the preview with the renderer -->
  <mx:Fade id="fadeOut"
           duration="500"
           alphaTo="0" />
  <mx:Fade id="fadeIn"
           duration="500"
           alphaTo="1"
           alphaFrom="0" />

  <!-- The UFI Preview displays if there is any feedback to a stream
       story. Clicking the preview replaces it with the UFI renderer -->
  <util:FlowBox width="100%"
                id="ufiPreview"
                styleName="ufiPreview" >

    <mx:HBox styleName="actionButtons" >
      <!-- Display number of comments, or add a comment -->
      <util:FBButton autoStyle="true"
                     styleNamePrefix="actionButton"
                     includeInLayout="{MathUtil.or(data.comments.can_post,
                                       data.comments.count > 0)}"
                     visible="{MathUtil.or(data.comments.can_post,
                               data.comments.count > 0)}"
                     click="commentClicked(event)"
                     direction="horizontal" >
        <mx:Image source="@Embed('../../assets/comment.png')" />
        <mx:Label styleName="actionButtonLabel"
                  text="{commentTitle(data.comments.count, ufiMode)}" />
      </util:FBButton>

      <!-- Like button -->
      <util:FBButton id="likeLink"
                     autoStyle="true"
                     styleNamePrefix="actionButton"
                     visible="{data.likes.can_like}"
                     includeInLayout="{data.likes.can_like}"
                     click="likeClicked(event)"
                     direction="horizontal" >
        <mx:Image source="@Embed('../../assets/like.png')" />
        <mx:Label styleName="actionButtonLabel"
                  text="{data.likes.user_likes ? 'Unlike' : 'Like'}" />
      </util:FBButton>
    </mx:HBox>

    <!-- Show how many people like this in the preview -->
    <renderer:LikesRenderer id="likesRenderer"
                            styleName="likeText"
                            width="100%"
                            maxWidth="{width}"
                            data="{data}" />
  </util:FlowBox>

  <!-- The UFI renderer displays the actual likes and comments -->
  <util:AnimatedCanvas id="ufiDetail"
                       width="100%"
                       visible="false"
                       animateOnce="true"
                       animateOut="true"
                       animateIn="true"
                       tweenComplete="ufiRevealed = true">
    <mx:VBox width="100%"
             id="ufiRenderers"
             styleName="ufiRenderers" >
      <!-- These renderers show the Comments for this entry -->
      <renderer:CommentsRenderer id="commentsRenderer"
                                 width="100%"
                                 data="{data}" />

      <renderer:CommentBox id="commentBox"
                           width="100%"
                           data="{data}" />
    </mx:VBox>
  </util:AnimatedCanvas>

  <mx:Script><![CDATA[
    import fb.FBAPI;
    import fb.FBEvent;
    import fb.util.MathUtil;
    import fb.util.StringUtil;
    import fb.util.Output;

    import fbair.nile.Nile;
    import fbair.nile.NileContainer;
    import fbair.util.CommentCache;
    import fbair.util.display.AnimatedCanvas;

    import flash.events.Event;

    import mx.events.FlexEvent;
    import mx.utils.ObjectUtil;

    public static const UFI_PREVIEW:int = 1;
    public static const UFI_DETAIL:int = 2;

    [Bindable] public var ufiRevealed:Boolean = false;

    private var _ufiMode:int = UFI_PREVIEW;

    // Given a data object, returns the ufi_count
    public static function count(data:Object):int {
      return data.comments.count
             + data.likes.count
             + (data.commentBoxActive ? 1 : 0);
    }

    // Called when we want to like or unlike this stream entry
    private function likeClicked(event:Event):void {
      if (!data.likes.can_like) return;

      // Don't allow the link to be re-clicked during the period
      //   when we're posting to the server...
      likeLink.enabled = false;

      // Build our args and method depending on whether
      //   we're liking or unliking here
      var args:Object = {post_id:data.post_id};
      var method:String = (data.likes.user_likes ?
                          'stream.removeLike' : 'stream.addLike');

      // Call the server to like/unlike this stream entry
      FBAPI.callMethod(method, args)
        .addEventListener(FBEvent.SUCCESS, function(event:FBEvent):void {
          // Update our data.likes object to reflect these changes
          data.likes.immune = true; // So immediate update doesn't flip back
          data.likes.user_likes = !data.likes.user_likes;
          data.likes.count += data.likes.user_likes ? 1 : -1;

          // Update our likeLink text and re-enable for next time
          //actionRow.data = data;
          likeLink.enabled = true;

          // Update our likesRenderer now that we've changed it's data
          likesRenderer.update();
        });
    }

    private function commentTitle(comments:Number, mode:int):String {
      if (comments == 0) {
        return mode == UFI_PREVIEW ? 'Comment' : 'Cancel';
      } else {
        if (mode == UFI_PREVIEW)
          return StringUtil.pluralize('Comment', comments);
        else
          return 'Hide Comment' + (comments == 1 ? '' : 's');
      }
    }

    private function commentClicked(event:MouseEvent):void {
      if (ufiMode == UFI_DETAIL) {
        ufiMode = UFI_PREVIEW;
      } else if (data.comments.count == 0) {
        data.commentBoxActive = true;
        ufiMode = UFI_DETAIL;
        parentApplication.focusManager.setFocus(commentBox.commentInput);
      } else {
        ufiMode = UFI_DETAIL;
      }
    }

    // Constructor
    private function creationComplete(event:FlexEvent):void {
      CommentCache.dispatcher.addEventListener(
        CommentCache.COMMENT_CREATED,
        commentCreated);
      CommentCache.dispatcher.addEventListener(
        CommentCache.COMMENT_REMOVED,
        commentRemoved);
    }

    [Bindable]
    public function get ufiMode():int { return _ufiMode; }
    public function set ufiMode(to:int):void {
      if (_ufiMode == to) return;
      _ufiMode = to;

      switch (ufiMode) {
        case UFI_PREVIEW :
          fadeOut.play([ufiDetail]);
          ufiDetail.visible = false;
          break;

        case UFI_DETAIL :
          commentsRenderer.reveal();
          if (ufiDetail.animateIn)
            fadeIn.play([ufiDetail]);
          else
            ufiDetail.alpha = 1;
          ufiDetail.visible = true;
          break;
      }
    }

    // Our data setter
    override public function set data(new_data:Object):void {
      // Pass along commentBoxActive if we have it
      if (data) new_data.commentBoxActive = data.commentBoxActive;
      else new_data.commentBoxActive = false;

      super.data = new_data;
    }

    // Reset us for reuse
    public function destroy():void {
      // Back to preview mode
      ufiMode = UFI_PREVIEW;
      ufiRevealed = false;

      // Destroy our parts
      commentsRenderer.destroy();
      commentBox.destroy();
    }

    // Called when we deleted a comment
    private function commentRemoved(event:FBEvent):void {
      // If not revealed, or not us, then don't care
      if (!commentsRenderer.revealed ||
          event.data.post_id != data.post_id) return;

      commentsRenderer.removeLocalComment(event.data.id);
    }

    // Called when we just successfully commented
    private function commentCreated(event:FBEvent):void {
      if (event.data.post_id != data.post_id || !data.comments) return;

      // Get a copy of our data
      var commentData:Object = ObjectUtil.copy(event.data);

      // Iterate our comment count, and put in comment_list
      if (!data.comments.comment_list ||
          !(data.comments.comment_list is Array))
        data.comments.comment_list = new Array();
      data.comments.comment_list.push(commentData);
      data.comments.count++;

      // Mark this as immune for next go around
      commentsRenderer.markImmune(commentData);

      // Add this comment to our CommentsRenderer
      commentsRenderer.addComment(commentData);

      // Remove overflow, if any.
      commentsRenderer.removeExcessComments();

      // Mark latest update
      commentsRenderer.markLatestUpdate();

      // Reveal us, if needed
      if (data.filter_key == NileContainer.CurrentFilter)
        ufiMode = UFI_DETAIL;
    }
  ]]></mx:Script>
</mx:VBox>
