<!--
  Copyright Facebook Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 -->
<!-- Loading indicator displays itself when we have trouble connecting
     to Facebook for authentication or stream loading -->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:util="fbair.util.display.*" >
  <util:LinkImage width="{size}"
                  height="{size}"
                  source="{source}"
                  url="{url}" />

  <mx:Script><![CDATA[
    import fbair.util.ProfileCache;
    import fbair.util.display.LinkImage;

    import fb.FBEvent;

    import mx.controls.Image;
    import mx.core.UIComponent;

    [Bindable] private var source:String;
    [Bindable] private var url:String;

    [Bindable] public var size:Number;
    [Bindable] public var linkEnabled:Boolean = true;

    private var cornerMask:UIComponent = new UIComponent();
    private var _cornerRadius:int = 6;
    private var _profileID:String;

    [Bindable]
    public function get profileID():String { return _profileID; }
    public function set profileID(new_profile_id:String):void {
      if (new_profile_id == profileID) return;
      _profileID = new_profile_id;

      // Screw bogus profile ids
      if (!profileID || profileID == "0" || profileID == "null") {
        return;
      }

      // Get profile data for our image
      ProfileCache.getProfile(profileID).addEventListener(
        ProfileCache.PROFILE_FETCHED,
        function(event:FBEvent):void {
          // Note we use SilhouetteURL if our actor has no photo
          source = event.data.pic_square;
          url = linkEnabled ? event.data.url : null;
        });
    }

    [Bindable]
    public function get cornerRadius():int { return _cornerRadius; }
    public function set cornerRadius(new_radius:int):void {
      _cornerRadius = new_radius;
    }

    override protected function createChildren():void {
      super.createChildren();
      addChild(cornerMask);
    }

    override protected function updateDisplayList(unscaledWidth:Number,
      unscaledHeight:Number):void {
      super.updateDisplayList(unscaledWidth, unscaledHeight);

      cornerMask.graphics.clear();
      cornerMask.graphics.beginFill(0);
      cornerMask.graphics.drawRoundRect(0, 0, unscaledWidth, unscaledHeight,
                                        cornerRadius);
      cornerMask.graphics.endFill();

      mask = cornerMask;
    }

  ]]></mx:Script>
</mx:Canvas>
