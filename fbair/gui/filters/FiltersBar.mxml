<!--
  Copyright Facebook Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 -->
<!-- This contains our filters tab bar at top of window -->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:filters="fbair.gui.filters.*"
           xmlns:util="fbair.util.display.*"
           height="26"
           creationComplete="creationComplete(event)"
           addedToStage="addedToStage(event)" >
  <mx:Metadata>
    [Event(name="tabAdded", type="fb.FBEvent")]
    [Event(name="tabRemoved", type="fb.FBEvent")]
    [Event(name="tabFocused", type="fb.FBEvent")]
  </mx:Metadata>

  <!-- We use these fades when hiding the logo -->
  <mx:Fade id="fadeOut"
           duration="300"
           alphaTo="0" />
  <mx:Fade id="fadeIn"
           duration="300"
           alphaTo="1"
           alphaFrom="0" />

  <mx:Image id="fbLogo"
            styleName="fbLogo"
            source="@Embed('../../assets/fblogo.png')"
            hideEffect="fadeOut"
            showEffect="fadeIn" />

  <mx:HBox id="filterTabs"
           styleName="filterTabs"
           width="100%"
           updateComplete="filterTabChanged(event)" />

  <util:FBButton id="filterMenuButton"
                    styleName="filterMenuButton"
                    height="26"
                    alpha="{filterMenuButton.state == FBButton.OVER ?
                            1.0 : 0.7}"
                    mouseDown="menuButtonClicked(event)"
                    enabled="{menu.data.length > 0}" >
                    <mx:Image source="@Embed('../../assets/plus.png')" />
                   </util:FBButton>

  <mx:Script><![CDATA[
    import fb.FBAPI;
    import fb.FBConnect;
    import fb.FBEvent;
    import fb.util.Output;

    import fbair.gc.Depot;
    import fbair.gui.FBTooltip;
    import fbair.gui.filters.TabItem;
    import fbair.util.HashArray;

    import flash.events.Event;
    import flash.events.KeyboardEvent;
    import flash.ui.Keyboard;

    import mx.binding.utils.BindingUtils;
    import mx.collections.ArrayCollection;
    import mx.events.FlexEvent;
    import mx.managers.PopUpManager;

    public static const MaxTabs:int = 7;

    [Bindable] public static var TabCount:int = 0;
    [Bindable] private var menu:FiltersMenu;
    [Bindable] public var focusHistory:HashArray = new HashArray();
    private var _currentTab:String;
    private var _tabData:ArrayCollection = new ArrayCollection();
    private var tabsHash:HashArray = new HashArray();

    private function creationComplete(event:FlexEvent):void {
      addEventListener("deleteClick", deleteTabClicked);
      addEventListener("tabClick", tabClicked);
    }
    private function addedToStage(event:Event):void {
      stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDown);
    }

    override protected function createChildren():void {
      super.createChildren();

      menu = new FiltersMenu();
      BindingUtils.bindSetter(function(new_y:int):void {
        menu.y = new_y + 2;
      }, this, "y");
      menu.addEventListener(FlexEvent.UPDATE_COMPLETE,
        function(event:FlexEvent):void {
          menu.x = width - menu.width - 2;
        });
      menu.visible = false;
      menu.addEventListener(FiltersMenu.FILTER_CLICK, menuFilterClicked);
      menu.addEventListener(FiltersMenu.PAGE_CLICK, menuPageClicked);
      PopUpManager.addPopUp(menu, this);
    }

    // Keyboard shortcuts
    private function keyDown(event:KeyboardEvent):void {
      if (tabsHash.length == 1 || focusManager.getFocus()) return;

      // If escape, then close this tab
      if (event.keyCode == Keyboard.ESCAPE) {
        removeTab(currentTab);
        return;
      }

      // If 2 modifiers and an arrow, then bounce around
      var modifiers:int = (event.commandKey ? 1 : 0) +
                          (event.shiftKey ? 1 : 0) +
                          (event.controlKey ? 1 : 0) +
                          (event.altKey ? 1 : 0);
      if (modifiers < 2) return;

      // Set this to where we want to go, if anywhere
      var tmpIndex:Number = Number.NaN;

      // Go left
      if (event.keyCode == Keyboard.LEFT ||
          event.keyCode == Keyboard.LEFTBRACKET)
        tmpIndex = tabsHash.indexAtKey(currentTab) - 1;
      // Go right
      else if (event.keyCode == Keyboard.RIGHT ||
          event.keyCode == Keyboard.RIGHTBRACKET)
        tmpIndex = tabsHash.indexAtKey(currentTab) + 1;
      // Go to a specific number
      else if (event.keyCode >= 49 && event.keyCode <= 57)
        tmpIndex = event.keyCode - 49;

      // Time to select the desired tab
      if (!isNaN(tmpIndex)) {
        if (tmpIndex >= tabsHash.length) tmpIndex = 0;
        else if (tmpIndex < 0) tmpIndex = tabsHash.length - 1;
        currentTab = tabsHash.keyAtIndex(tmpIndex);
        var currentRenderer:TabItem = tabsHash.getAtKey(currentTab);
        if (currentRenderer.labelObscured)
          FBTooltip.flash(tabData[tmpIndex].name, currentRenderer);
        else
          FBTooltip.hide();
      }
    }

    // Callback on filterTab width to determine if logo displays
    private function filterTabChanged(event:FlexEvent):void {
      fbLogo.visible = (width - 98) > filterTabs.measuredWidth;
    }

    // Menu item click callbacks
    private function menuFilterClicked(event:FBEvent):void {
      addTab(event.data);
      menu.hide();
    }
    private function menuPageClicked(event:FBEvent):void {
      addTab(event.data, true);
      menu.hide();
    }

    // Button to show the menu
    private function menuButtonClicked(event:MouseEvent):void {
      menu.show();
    }

    // Filter fetching
    public function fetchFilters():void {
      FBAPI.callMethod("fql.multiquery", {
        queries:{
          filters:"select filter_key, name, rank, icon_url, is_visible, " +
            "type, value from stream_filter where uid = " +
            FBConnect.session.uid + " order by rank",
          page_admins:"select page_id from page_admin where uid = " +
            FBConnect.session.uid,
          pages:"select name, pic_square, page_id " +
            "from page where page_id in " +
            "(select page_id from #page_admins)"
        }
      }).addEventListener(FBEvent.SUCCESS, function(event:FBEvent):void {
        // Break out the results into a hash keyed by result name
        var resultObject:Object = new Object();
        for each (var result:Object in event.data)
          resultObject[result.name] = result.fql_result_set;

        // We're going to force our page objects into looking like filters,
        //  but attach an extra flag to indicate they are in fact pages...
        //  this way the FiltersBar can just treat them all as "Filters"
        for each (var page:Object in resultObject.pages) {
          resultObject.filters.unshift({
            is_page:true,
            name:page.name,
            filter_key:page.page_id,
            is_visible:true,
            icon_url:page.pic_square
          })
        }
        data = new HashArray(resultObject.filters, 'filter_key');
      });
    }

    // Data setting
    [Bindable]
    public function get tabData():ArrayCollection { return _tabData; }
    public function set tabData(new_tabData:ArrayCollection):void {
      Output.assert(tabData.length == 0,
        "Setting tabData when already initialized?!");
      Output.assert(filterTabs.numChildren == 0,
        "Setting tabData when already have children?!");
      Output.assert(tabsHash.length == 0,
        "Setting tabData when already have tabsHash data?!");

      // Add everything
      _tabData = new_tabData;
      for each (var tab:Object in tabData) {
        var renderer:TabItem = Depot.get(TabItem);
        renderer.data = tab;
        tabsHash.push(tab.filter_key, renderer);
        filterTabs.addChild(renderer);
      }

      // Update tabcount
      TabCount = tabsHash.length;
    }

    override public function set data(new_data:Object):void {
      // Build menu data
      super.data = new_data;
      menu.data = data;

      // if this is your first launch, we'll give you default feed
      if (tabsHash.length == 0)
        addTab('nf');
    }

    // Tab clicking
    private function deleteTabClicked(event:FBEvent):void {
      removeTab(event.target.data.filter_key);
    }

    private function tabClicked(event:FBEvent):void {
      currentTab = event.target.data.filter_key;
    }

    // Tab adding/removing
    public function addTab(key:String, is_page:Boolean = false):void {
      // if a tab already exists for this filter, focus it.
      if (tabsHash.hasKey(key)) {
        currentTab = key;
        return;
      }

      // Remove staleness
      while (tabsHash.length > MaxTabs)
        removeTab(focusHistory.first(), false);

      // Create new tab
      var renderer:TabItem = Depot.get(TabItem);
      renderer.data = data.getAtKey(key);
      tabData.addItem(data.getAtKey(key));
      tabsHash.push(key, renderer);
      filterTabs.addChild(renderer);

      // Update tabCount
      TabCount = tabsHash.length;

      // Dispatch event of add
      dispatchEvent(new FBEvent("tabAdded", {
        key:key,
        is_page:is_page
      }));

      // Select current tab
      currentTab = key;
    }

    public function removeTab(key:String, selectNew:Boolean = true):void {
      if (tabsHash.length == 1) return;

      Output.assert(tabsHash.hasKey(key),
        "Trying to remove key not in list?: " + key);
      Output.assert(focusHistory.hasKey(key),
        "Trying to remove key without history?");

      // Remove from history
      focusHistory.removeKey(key);

      // Remove tab
      tabData.removeItemAt(tabsHash.indexAtKey(key));
      var deadRenderer:TabItem = tabsHash.removeKey(key);
      Depot.put(filterTabs.removeChild(deadRenderer));

      // Focus new tab if this was the current
      if (selectNew && currentTab == key)
        currentTab = focusHistory.pop();

      TabCount = tabsHash.length;

      // Removed event
      dispatchEvent(new FBEvent("tabRemoved", key));
    }

    // Tab switching
    [Bindable]
    public function get currentTab():String {
      return _currentTab;
    }
    public function set currentTab(key:String):void {
      if (currentTab == key) return;

      // Disable old tab
      if (tabsHash.hasKey(currentTab))
        tabsHash.getAtKey(currentTab).data.active = false;

      // Set new tab, and add to history
      _currentTab = key;
      focusHistory.push(key, key);
      Output.assert(tabsHash.hasKey(key),
        "Don't have tab: " + key + " ?!");
      tabsHash.getAtKey(key).data.active = true;

      // Focused event
      dispatchEvent(new FBEvent("tabFocused", key));
    }
  ]]></mx:Script>
</mx:Canvas>
