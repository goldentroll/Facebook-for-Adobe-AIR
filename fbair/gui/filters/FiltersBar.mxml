<!--
  Copyright Facebook Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 -->
<!-- This contains our filters tab bar at top of window -->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:filters="fbair.gui.filters.*"
           xmlns:display="fbair.util.display.*"
           height="26"
           creationComplete="creationComplete(event)"
           addedToStage="addedToStage(event)" >
  <mx:Metadata>
    [Event(name="tabAdded", type="fb.FBEvent")]
    [Event(name="tabRemoved", type="fb.FBEvent")]
    [Event(name="tabFocused", type="fb.FBEvent")]
  </mx:Metadata>

  <!-- We use these fades when hiding the logo -->
  <mx:Fade id="fadeOut"
           duration="300"
           alphaTo="0" />
  <mx:Fade id="fadeIn"
           duration="300"
           alphaTo="1"
           alphaFrom="0" />

  <mx:Image id="fbLogo"
            styleName="fbLogo"
            source="@Embed('../../assets/fblogo.png')"
            hideEffect="fadeOut"
            showEffect="fadeIn" />

  <mx:HBox id="filterTabs"
           styleName="filterTabs"
           width="100%"
           updateComplete="filterTabChanged(event)" />

  <display:FBButton id="filterMenuButton"
                    styleName="filterMenuButton"
                    height="26"
                    alpha="{filterMenuButton.state == FBButton.OVER ?
                            1.0 : 0.7}"
                    icon="@Embed('../../assets/plus.png')"
                    mouseDown="menuButtonClicked(event)"
                    enabled="{menu.data.length > 0}" />

  <mx:Script><![CDATA[
    import fb.FBAPI;
    import fb.FBConnect;
    import fb.FBEvent;
    import fb.util.Output;

    import fbair.gc.Depot;
    import fbair.gui.filters.FilterTab;
    import fbair.util.HashArray;

    import flash.events.Event;
    import flash.events.KeyboardEvent;
    import flash.ui.Keyboard;

    import mx.binding.utils.BindingUtils;
    import mx.collections.ArrayCollection;
    import mx.events.FlexEvent;
    import mx.managers.PopUpManager;

    public static const MaxTabs:int = 7;

    [Bindable] public static var TabCount:int = 0;
    [Bindable] public var focusHistory:HashArray = new HashArray();

    [Bindable] private var menu:FiltersMenu;
    private var _currentTab:String;
    private var _tabData:ArrayCollection = new ArrayCollection();
    private var tabsHash:HashArray = new HashArray();

    private function creationComplete(event:FlexEvent):void {
      addEventListener("deleteClick", deleteTabClicked);
      addEventListener("tabClick", tabClicked);
    }
    private function addedToStage(event:Event):void {
      stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDown);
    }

    override protected function createChildren():void {
      super.createChildren();

      menu = new FiltersMenu();
      BindingUtils.bindSetter(function(new_y:int):void {
        menu.y = new_y + 2;
      }, this, "y");
      menu.addEventListener(FlexEvent.UPDATE_COMPLETE,
        function(event:FlexEvent):void {
          menu.x = width - menu.width - 2;
        });
      menu.visible = false;
      menu.addEventListener("itemClick", menuItemClicked);
      PopUpManager.addPopUp(menu, this);
    }

    // Keyboard shortcuts
    private function keyDown(event:KeyboardEvent):void {
      if (tabsHash.length == 1 || focusManager.getFocus()) return;

      // If escape, then close this tab
      if (event.keyCode == Keyboard.ESCAPE) {
        removeTab(currentTab);
        return;
      }

      // If 2 modifiers and an arrow, then bounce around
      var modifiers:int = (event.commandKey ? 1 : 0) +
                          (event.shiftKey ? 1 : 0) +
                          (event.controlKey ? 1 : 0) +
                          (event.altKey ? 1 : 0);
      if (modifiers < 2) return;

      var tmpIndex:int = -1;
      if (event.keyCode == Keyboard.LEFT) {
        tmpIndex = tabsHash.indexAtKey(currentTab) - 1;
        if (tmpIndex == -1)
          tmpIndex = tabsHash.length - 1;
      }
      if (event.keyCode == Keyboard.RIGHT) {
        tmpIndex = tabsHash.indexAtKey(currentTab) + 1;
        if (tmpIndex == tabsHash.length)
          tmpIndex = 0;
      }

      if (tmpIndex != -1)
        currentTab = tabsHash.keyAtIndex(tmpIndex);
    }

    // Callback on filterTab width to determine if logo displays
    private function filterTabChanged(event:FlexEvent):void {
      fbLogo.visible = (width - 98) > filterTabs.measuredWidth;
    }

    // Button click callbacks
    private function menuItemClicked(event:FBEvent):void {
      addTab(event.data);
      hideMenu();
    }

    private function menuButtonClicked(event:MouseEvent):void {
      showMenu();
    }

    // Menu visibility
    public function showMenu():void {
      menu.visible = true;
      stage.addEventListener(MouseEvent.CLICK, stageClicked, true);
    }

    public function hideMenu():void {
      menu.visible = false;
      stage.removeEventListener(MouseEvent.CLICK, stageClicked, true);
    }

    private function stageClicked(event:MouseEvent):void {
      hideMenu();
    }

    // Filter fetching
    public function fetchFilters():void {
      FBAPI.callMethod("fql.query", {
        query:"select filter_key, name, rank, icon_url, is_visible, " +
          "type, value from stream_filter where uid = " +
          FBConnect.session.uid + " order by rank"
      }).addEventListener(FBEvent.SUCCESS, function(event:FBEvent):void {
        data = new HashArray(event.data, 'filter_key');
      });
    }

    // Data setting
    [Bindable]
    public function get tabData():ArrayCollection { return _tabData; }
    public function set tabData(new_tabData:ArrayCollection):void {
      Output.assert(tabData.length == 0,
        "Setting tabData when already initialized?!");
      Output.assert(filterTabs.numChildren == 0,
        "Setting tabData when already have children?!");
      Output.assert(tabsHash.length == 0,
        "Setting tabData when already have tabsHash data?!");

      // Add everything
      _tabData = new_tabData;
      for each (var tab:Object in tabData) {
        var renderer:FilterTab = Depot.get(FilterTab);
        renderer.data = tab;
        tabsHash.push(tab.filter_key, renderer);
        filterTabs.addChild(renderer);
      }

      // Update tabcount
      TabCount = tabsHash.length;
    }

    // Get the index of data item in tabData by key
    private function tabIndexByKey(key:String):int {
      for (var i:int = 0; i < tabData.length; i++)
        if (tabData[i].filter_key == key) return i;
      return -1;
    }

    override public function set data(new_data:Object):void {
      // Build menu data
      super.data = new_data;
      menu.data = data;

      // if this is your first launch, we'll give you default feed
      if (tabsHash.length == 0)
        addTab(data.getAt(0).filter_key);
    }

    // Tab clicking
    private function deleteTabClicked(event:FBEvent):void {
      removeTab(event.target.data.filter_key);
    }

    private function tabClicked(event:FBEvent):void {
      currentTab = event.target.data.filter_key;
    }

    // Tab adding/removing
    public function addTab(key:String):void {
      // if a tab already exists for this filter, focus it.
      if (tabsHash.hasKey(key)) {
        currentTab = key;
        return;
      }

      // Remove staleness
      while (tabsHash.length > MaxTabs)
        removeTab(focusHistory.first());

      // Create new tab
      var renderer:FilterTab = Depot.get(FilterTab);
      renderer.data = data.getAtKey(key);
      tabData.addItem(data.getAtKey(key));
      tabsHash.push(key, renderer);
      filterTabs.addChild(renderer);

      // Update tabCount
      TabCount = tabsHash.length;

      // Dispatch event of add
      dispatchEvent(new FBEvent("tabAdded", key));

      // Select current tab
      currentTab = key;
    }

    public function removeTab(key:String):void {
      if (tabsHash.length == 1) return;

      Output.assert(tabsHash.hasKey(key),
        "Trying to remove key not in list?: " + key);
      Output.assert(focusHistory.hasKey(key),
        "Trying to remove key without history?");

      // Remove from history
      focusHistory.removeKey(key);

      // Remove tab
      var deadRenderer:FilterTab = tabsHash.removeKey(key);
      tabData.removeItemAt(tabIndexByKey(key));
      Depot.put(filterTabs.removeChild(deadRenderer));

      // Focus new tab if this was the current
      if (currentTab == key)
        currentTab = focusHistory.last();

      TabCount = tabsHash.length;

      // Removed event
      dispatchEvent(new FBEvent("tabRemoved", key));
    }

    // Tab switching
    [Bindable]
    public function get currentTab():String {
      return _currentTab;
    }
    public function set currentTab(key:String):void {
      if (_currentTab == key) return;

      // Disable old tab
      if (tabsHash.hasKey(currentTab))
        tabsHash.getAtKey(currentTab).data.active = false;

      // Set new tab, and add to history
      _currentTab = key;
      focusHistory.push(key, key);
      Output.assert(tabsHash.hasKey(key),
        "Don't have tab: " + key + " ?!");
      tabsHash.getAtKey(key).data.active = true;

      // Focused event
      dispatchEvent(new FBEvent("tabFocused", key));
    }
  ]]></mx:Script>
</mx:Canvas>
